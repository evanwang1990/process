}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
recode.res.text <- paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
eval(parse(text = recode))
}
recode(x, recodes = 'low--ymd("20150313")=1;else=2')
recode(x, recodes = 'low--ymd("20150313")=1;else=2')
recode(x, recodes = 'low--ymd("20150313")=1;else=2')
recode <- function(var, recodes, as.factor.result = TRUE, levels, labels){
if(is.factor(var)) var <- as.character(var)
deal.time <- any(class(var) %like% 'POSIX')
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
recode.res.text <- paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
eval(parse(text = recode.res.text))
}
recode(x, recodes = 'low--ymd("20150313")=1;else=2')
recode(x, recodes = 'low--ymd("20150313")=1;else=2', levels = c(1, 2), labels = c('以前', '之后'))
temp <- function(x)
{
return(substitute(x))
}
temp(c(1, 2))
temp <- function(levels, labels)
{
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
}
temp(c(1, 2), c('1', '2'))
temp(levels = c(1, 2), labels = c('1', '2'))
temp <- function(levels, labels)
{
cat(substitute(levels), '\n')
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
help(substitute)
temp <- function(levels, labels)
{
cat(quote(levels), '\n')
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
temp <- function(levels, labels)
{
cat(quote(substitute(levels)), '\n')
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
temp <- function(levels, labels)
{
print(quote(substitute(levels)))
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
temp <- function(levels, labels)
{
print(substitute(levels))
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', substitute(levels))),
ifelse(missing(labels), '', paste0(',labels=', substitute(labels))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
str(1)
temp <- function(levels, labels)
{
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', as.character(substitute(levels)))),
ifelse(missing(labels), '', paste0(',labels=', as.character(substitute(labels)))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
class(substitute('1<2'))
temp <- function(levels, labels)
{
levels <- substitute(levels)
print(levels)
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', as.character(substitute(levels)))),
ifelse(missing(labels), '', paste0(',labels=', as.character(substitute(labels)))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
temp <- function(levels, labels)
{
levels <- substitute(levels)
print(levels)
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', levels)),
ifelse(missing(labels), '', paste0(',labels=', as.character(substitute(labels)))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
levels <- c(1, 2)
substitute(lelvels)
substitute(levels)
levels <- substitute('c(1, 2')
levels <- substitute('c(1, 2)')
levels
enquote(a == a)
quote(a == a)
temp <- function(levels, labels)
{
levels <- substitute(levels)
print(class(levels))
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', levels)),
ifelse(missing(labels), '', paste0(',labels=', as.character(substitute(labels)))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
help(call)
str(substitute("1:2"))
str(substitute(1:2))
??language
class(substitute(1:2))
substitute(substitute(1:2))
names(c(1, 2))
all.names(expression(sin(x+y)))
all.names(substitute('c(1, 2)'))
help(all.names)
all.names(expression(substitute('c(1, 2)')))
all.names(substitute(c(1, 2)))
all.names(expression(c(1, 2)))
expression(c(1, 2))
eval(expression(c(1, 2)))
all.vars(expression(c(1, 2)))
help(parse)
quote(`foo bar`+1)
deparse(quote(`foo bar`+1))
temp <- function(levels, labels)
{
levels <- deparse(levels)
print(class(levels))
paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', levels)),
ifelse(missing(labels), '', paste0(',labels=', as.character(substitute(labels)))),
')')
}
temp(levels = c(1, 2), labels = c('1', '2'))
recode <- function(var, recodes, as.factor.result = TRUE, levels, labels){
if(is.factor(var)) var <- as.character(var)
deal.time <- any(class(var) %like% 'POSIX')
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
recode.res.text <- paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', deparse(levels))),
ifelse(missing(labels), '', paste0(',labels=', deparse(labels))),
')')
eval(parse(text = recode.res.text))
}
recode(x, recodes = 'low--ymd("20150313")=1;else=2', levels = c(1, 2), labels = c('以前', '之后'))
recode(x, recodes = 'low--ymd("20150313")=1;else=2', levels = c(3, 2), labels = c('以前', '之后'))
recode(x, recodes = 'low--ymd("20150313")=1;else=2', levels = c(3, 2), labels = c('以前', '之后'), as.factor.result = F)
recode <- function(var, recodes, as.factor.result = TRUE, levels, labels){
if(is.factor(var)) var <- as.character(var)
deal.time <- any(class(var) %like% 'POSIX')
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
if(as.factor.result){
recode.res.text <- paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', deparse(levels))),
ifelse(missing(labels), '', paste0(',labels=', deparse(labels))),
')')
recode.res <- eval(parse(text = recode.res.text))
}
res
}
recode(x, recodes = 'low--ymd("20150313")=1;else=2', levels = c(3, 2), labels = c('以前', '之后'), as.factor.result = F)
recode <- function(var, recodes, as.factor.result = TRUE, levels, labels){
if(is.factor(var)) var <- as.character(var)
deal.time <- any(class(var) %like% 'POSIX')
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
if(as.factor.result){
recode.res.text <- paste0('factor(recode.res',
ifelse(missing(levels), '', paste0(',levels=', deparse(levels))),
ifelse(missing(labels), '', paste0(',labels=', deparse(labels))),
')')
recode.res <- eval(parse(text = recode.res.text))
}
recode.res
}
recode(x, recodes = 'low--ymd("20150313")=1;else=2', levels = c(3, 2), labels = c('以前', '之后'), as.factor.result = F)
recode(-2:4, recodes = 'low--2=1;else=2')
head(vector)
help(vector)
vector(mode='any', 20)
vector(mode='character', 20)
library(process)
help(package=process)
round(12345, 100)
round(1.098, 0.03)
library(process)
help
help(package=process)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
dist(1:4, 2:5)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
sort(c(2, 0, 3, 5, 7, 2, 6))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main(4)
main(5)
sort(c(2, 0, 3, 5, 7, 2, 6))
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
float kDist(vector<float> dist, int k)
{
nth_element(dist.begin(), dist.begin() + k + 1, dist.end());
for(int i=0; i<7; ++i)
{
cout<<dist[i]<<endl;
}
return dist[k];
}
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 6)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 2)
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 1)
library(microbenchmark)
randu(10)
ranuni
unif
random??
ranunig
??random
runif(10)
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
microbenchmark(kDist(runif(100000), 5), kDist(runif(100000), 99995))
microbenchmark(kDist(runif(100000), 5), kDist(runif(100000), 99995))
library(process)
library(process)
rcpp_parallel_js_distance(matrix(1:9, 3))
Rcpp::sourceCpp('src/tmp.cpp')
rcpp_parallel_js_distance(matrix(1:9, 3))
process::process_rcpp_js_distance(matrix(1:9, 3))
rm(ls())
rm(list = ls())
process_rcpp_js_distance(matrix(1:9, 3))
rcpp_js_distance(matrix(1:9, 3))
library(process)
process_rcpp_js_distance(matrix(1:9, 3))
rcpp_js_distance(matrix(1:9, 3))
library(process)
rcpp_js_distance(matrix(1:9, 3))
rcpp_js_distance(matrix(1:9, 3))
rcpp_parallel_js_distance
rcpp_parallel_js_distance(matrix(1:9, 3))
LOF(matrix(1:20, 4), 2, 0)
