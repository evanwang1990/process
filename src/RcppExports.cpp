// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// parallelLOF
NumericVector parallelLOF(NumericMatrix data, unsigned int k, int equal_num);
RcppExport SEXP process_parallelLOF(SEXP dataSEXP, SEXP kSEXP, SEXP equal_numSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP );
        Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP );
        Rcpp::traits::input_parameter< int >::type equal_num(equal_numSEXP );
        NumericVector __result = parallelLOF(data, k, equal_num);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// TrimSum
float TrimSum(NumericVector A, int p, int r, int K);
RcppExport SEXP process_TrimSum(SEXP ASEXP, SEXP pSEXP, SEXP rSEXP, SEXP KSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        Rcpp::traits::input_parameter< int >::type r(rSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        float __result = TrimSum(A, p, r, K);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// TrimMean
float TrimMean(NumericVector A, int p, int r, int K);
RcppExport SEXP process_TrimMean(SEXP ASEXP, SEXP pSEXP, SEXP rSEXP, SEXP KSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        Rcpp::traits::input_parameter< int >::type r(rSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        float __result = TrimMean(A, p, r, K);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test
NumericVector test(NumericVector A, int p, int r, int K);
RcppExport SEXP process_test(SEXP ASEXP, SEXP pSEXP, SEXP rSEXP, SEXP KSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        Rcpp::traits::input_parameter< int >::type r(rSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        NumericVector __result = test(A, p, r, K);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
