.Call('process_TrimMean', PACKAGE = 'process', 1:10, 0, 10, 1)
trim.mean(1:10,trim = 0.1)
get("aa")
help(try)
a<-b
a<-1
b<-2
exists(c('a','b'))
help(exists)
exists('')
sapply(c('a','b'),exists)
sapply(c('a','b','c'),exists)
sapply(c('a','b','x'),exists)
list(1,2,3)
list(c(1,2),c(1,3))
sapply(list(c(1,2),c(1,3)),identical)
sapply(list(c(1,2),c(1,3)),'[',identical)
sapply(list(c(1,2),c(1,3)),'[',1)
identical
sapply(list(c(1,2),c(1,3)),'[',identical)
identical(1,2,3)
length(list(c(1,2),c(3,4)))
lapply(list(c(1,2),c(3,4),identical)
lapply(list(c(1,2),c(3,4)),identical)
help(sapply)
lapply(list(c(1,2),c(3,4)),length)
help(identical)
help(map)
help(Map)
Map(c(1,1,2,2,3,4,5),identical)
Map(identical,c(1,1,2,2,3,4,5))
Reduce(identical,c(1,1,2,2,3,4,5))
sapply(list(c(1,2),c(3,4),c(1,2,3)))
sapply(list(c(1,2),c(3,4),c(1,2,3)),length)
list(c(1,2),c(3,4),c(1,2,3))
by <- list(c(1,2),c(3,4),c(1,2,3))
by[1]
by[[1]]
a <- 1
class(get('a'))
is.data.table
help(data.table)
library(data.table)
is.data.table
get("iris")
is.data.table(get('iris'))
setDT(get('iris'))
is.data.table(get('iris'))
is.numeric(1)
round
round(3.46,0.1)
round(3.46,0.01)
round(3.46,2)
round(3.46,1)
p.round <- function(x, unit)
{
if(!is.numeric(x)) stop("input vector is not numeric!")
if(unit <= 0)
{
return(x)
warning("the unit is not more than zero, the original values will be returned!")
}
lower <- floor(x / unit) * unit
higher <- ceiling(x / unit) * unit
if(2 * x - lower - higher <= 0) return(lower)
else return(higher)
}
p.round(3.46,0.02)
p.round(3.46,0.03)
p.round(3.46,0.3)
library(microbenchmark)
microbenchmark(p.round(3.124567,0.001),round(3.124567,3))
round(3.124567, 3)
p.round(3.124567, 0.001)
help(round)
library(process)
library(process)
library(process)
library(process)
install.packages("E:/lawson/lawson_location_analysis/lawsonLoc_0.1.zip", repos = NULL)
library(lawsonLoc)
round
round(0.93845, digits=3)
round(234.93845, digits=3)
help(round)
library(process)
round(23,1)
round(23.23, 0.2)
rbind
help(rbind)
data(iris)
x1 <- iris
x2 <- iris
x3 <- iris
rbind(x1, x2, x3)
rbind(c('x1', 'x2', 'x3'))
help(parse)
text <- 'cbind(get("x1"), get("x2"))'
temp <- parse(text = text)
temp
eval(temp)
cbind('x1', 'x2')
text <- c("x1", 'x2')
text
paste0('get("',text, '")', collapse = ', ')
paste0('rbind(', paste0('get("',text, '")', collapse = ', '), ')')
text <- paste0('rbind(', paste0('get("',text, '")', collapse = ', '), ')')
parse(text = text)
rbindList <- function(objs)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('rbind(', paste0('get("',text, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
res
}
rbindList(c('x1', 'x2', 'x3'))
rbindList <- function(objs)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('rbind(', paste0('get("',objs, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
res
}
rbindList(c('x1', 'x2', 'x3'))
cbindList <- function(objs)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('cbind(', paste0('get("',objs, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
res
}
cbindList(c('x1', 'x2', 'x3'))
names(cbindList(c('x1', 'x2', 'x3')))
names(cbind(x1, x2, x3, deparse.level = 2))
names(cbind(x1, x2, x3, deparse.level = 3))
x <- names(cbind(x1, x2, x3, deparse.level = 3))
sapply(list(x1, x2), names)
sapply(list(x1, x2), ncol)
duplicate(x)
duplicated(x)
help(duplicated)
which(duplicated(x) == F)
x1
x1[c(T, T, F, F, F)]
cbindList <- function(objs, dup.rm = T)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('cbind(', paste0('get("',objs, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
if(dup.rm){
if(is.data.table(res)) res <- res[, which(duplicated(names(res)) == F), with = F]
else if(is.data.frame(x)) res <- res[!duplicated(names(res))
}
res
}
cbindList <- function(objs, dup.rm = T)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('cbind(', paste0('get("',objs, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
if(dup.rm){
if(is.data.table(res)) res <- res[, which(duplicated(names(res)) == F), with = F]
else if(is.data.frame(x)) res <- res[!duplicated(names(res))]
}
res
}
cbindList(c('x1', 'x2', 'x3'))
cbindList(c('x1', 'x2', 'x3'), dup.rm = T)
names(cbindList(c('x1', 'x2', 'x3'), dup.rm = T))
objs <- c('x1', 'x2', 'x3')
dup.rm = T
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('cbind(', paste0('get("',objs, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
is.data.table(res)
is.data.frame(x)
class(data)
class(res)
cbindList <- function(objs, dup.rm = T)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('cbind(', paste0('get("',objs, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
if(dup.rm){
if(is.data.table(res)) res <- res[, which(duplicated(names(res)) == F), with = F]
else if(is.data.frame(res)) res <- res[!duplicated(names(res))]
}
res
}
cbindList(c('x1', 'x2', 'x3'), dup.rm = T)
rename <- funcion(names)
{
i <- 1
while(TRUE)
{
dup <- duplicated(names)
names[dup] <- paste0(names[dup], '_', i)
if(!all(dup)) break
i <- i + 1
}
names
}
rename <- function(names)
{
i <- 1
while(TRUE)
{
dup <- duplicated(names)
names[dup] <- paste0(names[dup], '_', i)
if(!all(dup)) break
i <- i + 1
}
names
}
rename(names(res))
rename <- function(names)
{
i <- 1
while(TRUE)
{
dup <- duplicated(names)
names[dup] <- paste0(names[dup], '_', i)
if(!any(duplicated(names))) break
i <- i + 1
}
names
}
rename(names(res))
rename <- function(names)
{
i <- 1
names0 <- names
while(TRUE)
{
dup <- duplicated(names)
names[dup] <- paste0(names0[dup], '_', i)
if(!any(duplicated(names))) break
i <- i + 1
}
names
}
rename(names(res))
cbindList <- function(objs, dup.rm = T)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
text <- paste0('cbind(', paste0('get("',objs, '")', collapse = ', '), ')')
expr <- parse(text = text)
res <- eval(expr)
var_names <- names(res)
if(dup.rm){
if(is.data.table(res)) res <- res[, which(duplicated(var_names) == F), with = F]
else if(is.data.frame(res)) res <- res[!duplicated(var_names)]
}else{
names(res) <- rename(var_names)
}
res
}
cbindList(c('x1', 'x2', 'x3'), dup.rm = F)
names(cbind(c('x1', 'x2', 'x3'), dup.rm = F))
cbind(c('x1', 'x2', 'x3'), dup.rm = F)
names(cbindList(c('x1', 'x2', 'x3'), dup.rm = F))
library(process)
library(process)
library(process)
help(package=process)
names(cbindList(c('x1', 'x2', 'x3'), dup.rm = T))
names(cbindList(c('x1', 'x2', 'x3'), dup.rm = F))
help(merge)
data.table::merge
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
res <- Reduce(function(x, y)
{
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y)
res
}, objs)
res
}
mergeList(c('x1', 'x2', 'x3'), by = 'Species')
merge(x1, x2, by = 'Species')
iris <- cbind(id = 1:20, iris[1:20,])
x1 <- iris
x2 <- iris
x3 <- iris
mergeList(c('x1', 'x2', 'x3'), by = 'id')
x4 <- iris
mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id')
help(set)
help(diffset)
help(setdiff)
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
res <- Reduce(function(x, y)
{
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names.x[names.x %chin% names.y] <- paste0(names.x[names.x %chin% names.y], '_', substitute(x))
names.y[names.y %chin% names.x] <- paste0(names.y[names.y %chin% names.x], '_', substitute(y))
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y)
res
}, objs)
res
}
mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id')
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
res <- Reduce(function(x, y)
{
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- setdiff(names(x), by)
names.y <- setdiff(names(y), by)
names(x)[names.x %chin% names.y] <- paste0(names.x[names.x %chin% names.y], '_', substitute(x))
names(y)[names.y %chin% names.x] <- paste0(names.y[names.y %chin% names.x], '_', substitute(y))
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y)
res
}, objs)
res
}
mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id')
head(x1)
objs <- c('x1', 'x2', 'x3', 'x4')
by = 'id'
all = FALSE
all.x = FALSE
all.y = FALSE
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
pos
x <- 'x1'
y <- 'x2'
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- setdiff(names(x), by)
names.x
names.y <- setdiff(names(y), by)
names(x)[names.x %chin% names.y] <- paste0(names.x[names.x %chin% names.y], '_', substitute(x))
names(x)
names(x) %chin% c("Sepal.Width_x", "Petal.Length_x")
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
res <- Reduce(function(x, y)
{
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names(x)[names.x %chin% names.y & ! names.x %chin% by] <- paste0(names.x[names.x %chin% names.y & ! names.x %chin% by], '_', substitute(x)) #the variables with same names but not 'by' variables will be renamed
names(y)[names.y %chin% names.x & ! names.y %chin% by] <- paste0(names.y[names.y %chin% names.x & ! names.y %chin% by], '_', substitute(y))
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y)
res
}, objs)
res
}
mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id')
objs <- c('x1', 'x2', 'x3', 'x4')
by = 'id'
all = FALSE
all.x = FALSE
all.y = FALSE
x <- 'x1'
y <- 'x2'
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names.x
names.y
names(x)[names.x %chin% names.y & ! names.x %chin% by]
substitute(x)
class(iris)
str(iris)
attributes(iris)
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
res <- Reduce(function(x, y)
{
dfname.y <- substitute(y)
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names(y)[names.y %chin% names.x & ! names.y %chin% by] <- paste0(names.y[names.y %chin% names.x & ! names.y %chin% by], '_', dfname.y) #the variables with same names but not 'by' variables will be renamed
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y)
res
}, objs)
res
}
mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id')
names(mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id'))
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
i <- 0
res <- Reduce(function(x, y)
{
i <- i + 1
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names(y)[names.y %chin% names.x & ! names.y %chin% by] <- paste0(names.y[names.y %chin% names.x & ! names.y %chin% by], '_', i) #the variables with same names but not 'by' variables will be renamed
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y, )
res
}, objs)
res
}
names(mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id'))
help(assign)
assign('x', 1, envir = 'e1')
assign('x', 1, envir = e1)
e1 <- new.env()
assign('x', 1, envir = e1)
e1
ls(e1)
e1$x
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
e <- new.env()
assign('i', 0, e)
res <- Reduce(function(x, y)
{
e$i <- e$i + 1
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names(y)[names.y %chin% names.x & ! names.y %chin% by] <- paste0(names.y[names.y %chin% names.x & ! names.y %chin% by], '_', i) #the variables with same names but not 'by' variables will be renamed
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y, )
res
}, objs)
res
}
names(mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id'))
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
e <- new.env()
assign('i', 0, e)
res <- Reduce(function(x, y)
{
e$i <- e$i + 1
cat(e$i, '\n')
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names(y)[names.y %chin% names.x & ! names.y %chin% by] <- paste0(names.y[names.y %chin% names.x & ! names.y %chin% by], '_', i) #the variables with same names but not 'by' variables will be renamed
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y, )
res
}, objs)
res
}
names(mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id'))
mergeList <- function(objs, by = NULL, all = FALSE, all.x = FALSE, all.y = FALSE)
{
if(!is.character(objs)) stop("The input should be a vector of R objects' names\n")
pos <- apply(array(objs), 1, exists)
if(!all(pos)) stop(paste0(objs[!pos], collapse = ' '), ' not exist!\n')
e <- new.env()
assign('i', 0, e)
res <- Reduce(function(x, y)
{
e$i <- e$i + 1
cat(e$i, '\n')
if(is.character(x)) x <- get(x)
if(is.character(y)) y <- get(y)
names.x <- names(x)
names.y <- names(y)
names(y)[names.y %chin% names.x & ! names.y %chin% by] <- paste0(names.y[names.y %chin% names.x & ! names.y %chin% by], '_', e$i) #the variables with same names but not 'by' variables will be renamed
res <- merge(x, y, by = by, all = all, all.x = all.x, all.y = all.y, )
res
}, objs)
res
}
names(mergeList(c('x1', 'x2', 'x3', 'x4'), by = 'id'))
library(process)
help(package = process)
