}else{
bad_cols <- setdiff(by, names(data))
if (length(bad_cols) > 0) stop(paste0(bad_cols, collapse = ','),'do not exist!')
}
setkey(data, by)
dup.rows <- unique(data[duplicated(data, by = by), by, with = F], by = by)
data[dup.rows, nomatch = 0]
}
duplicate(iris, by = c('Species'))
duplicate <- function(data, by)
{
if(!is.data.frame(data)) stop(substitute(data), ' is not data.frame!\n')
if (!is.data.table(data)) setDT(data)
if (is.integer(by)){
if (any(by > nrow(data)) | any(by < 1)) stop('Integer indexes are out of range\n',"It's often better to use colnames")
else by <- names(data)[by]
}else{
bad_cols <- setdiff(by, names(data))
if (length(bad_cols) > 0) stop(paste0(bad_cols, collapse = ','),'do not exist!')
}
setkey(data, by)
dup.rows <- unique(data[duplicated(data, by = by), by, with = F], by = by)
data[dup.rows, nomatch = 0]
}
duplicate(iris, by = c('Species'))
setkey(iris, 'Species')
by
setkey
duplicate <- function(data, by)
{
if(!is.data.frame(data)) stop(substitute(data), ' is not data.frame!\n')
if (!is.data.table(data)) setDT(data)
if (is.integer(by)){
if (any(by > nrow(data)) | any(by < 1)) stop('Integer indexes are out of range\n',"It's often better to use colnames")
else by <- names(data)[by]
}else{
bad_cols <- setdiff(by, names(data))
if (length(bad_cols) > 0) stop(paste0(bad_cols, collapse = ','),'do not exist!')
}
setkeyv(data, by)
dup.rows <- unique(data[duplicated(data, by = by), by, with = F], by = by)
data[dup.rows, nomatch = 0]
}
setkey(iris, 'Species')
duplicate(iris, by = c('Species'))
setkeyv
? %+%
%+%
`%+%`
help(`%+%`)
??%+%
'good' %+% 'gf'
setkey
x <- iris
`...` <- 'Species'
...
`...`
var <- 'Species'
cols = as.character(substitute(list(var))[-1])
cols
as.character(substitute(list('Species'))[-1])
as.character(substitute(list(c('Species', 'good')))[-1])
setkeyv(iris, cols = c('Species', 'Sepal.Length'))
tables()
help(setkeyv)
set2key
set2keyv
head(iris)
duplicate(iris, c('Petal.Width', 'Species'))
duplicate(iris, c('Petal.Width', 'Species', 'Petal.Width'))
duplicate(iris, c('Petal.Width', 'Species', 'Sepal.Width'))
duplicate <- function(data, by)
{
if(!is.data.frame(data)) stop(substitute(data), ' is not data.frame!\n')
if (!is.data.table(data)) setDT(data)
if (is.integer(by)){
if (any(by > nrow(data)) | any(by < 1)) stop('Integer indexes are out of range\n',"It's often better to use colnames")
else by <- names(data)[by]
}else{
bad_cols <- setdiff(by, names(data))
if (length(bad_cols) > 0) stop(paste0(bad_cols, collapse = ','),'do not exist!')
}
by <- unique(by)
setkeyv(data, by)
dup.rows <- unique(data[duplicated(data, by = by), by, with = F], by = by)
data[dup.rows, nomatch = 0]
}
duplicate(iris, c('Petal.Width', 'Species', 'Petal.Width'))
duplicate1 <- function(data, by)
{
if (!('package::data.table' %in% search())) require(data.table)
if (!is.data.table(data)) setDT(data)
if (is.integer(by)){
if (any(by > nrow(data)) | any(by < 1)) stop('Integer indexes are out of range\n',"It's often better to use colnames")
else by <- names(data)[by]
}else{
bad_cols <- setdiff(by, names(data))
if (length(bad_cols) > 0) stop(paste0(bad_cols, collapse = ','),'do not exist!')
}
dup.rows <- unique(data[duplicated(data, by = by), by, with = F], by = by)
res <- merge(data, dup.rows, by = by, all = F)
res
}
library(microbenchmark)
microbenchmark(duplicate(iris, c('Species', 'Petal.Width')), duplicate1(iris, c('Species', 'Petal.Width')))
iris <- iris[sample(1:150, 10000, replace = T)]
class(iris)
microbenchmark(duplicate(iris, c('Species', 'Petal.Width')), duplicate1(iris, c('Species', 'Petal.Width')))
iris <- as.data.frame(iris)
class(iris)
microbenchmark(duplicate(iris, c('Species', 'Petal.Width')), duplicate1(iris, c('Species', 'Petal.Width')))
duplicate <- function(data, by)
{
if(!is.data.frame(data)) stop(substitute(data), ' is not data.frame!\n')
if (!is.data.table(data)) setDT(data)
if (is.integer(by)){
if (any(by > nrow(data)) | any(by < 1)) stop('Integer indexes are out of range\n',"It's often better to use colnames")
else by <- names(data)[by]
}else{
bad_cols <- setdiff(by, names(data))
if (length(bad_cols) > 0) stop(paste0(bad_cols, collapse = ','),'do not exist!')
}
by <- unique(by)
setkeyv(data, by)
#dup.rows <- unique(data[duplicated(data, by = by), by, with = F], by = by)
dup.rows <- data[duplicated(data, by = by), by, with = F]
data[dup.rows, nomatch = 0]
}
microbenchmark(duplicate(iris, c('Species', 'Petal.Width')), duplicate1(iris, c('Species', 'Petal.Width')))
help(duplicated)
DT <- data.table(A = rep(1:3, each=4), B = rep(1:4, each=3), C = rep(1:2, 6), key = "A,B")
DT
anyDuplicated(DT, by=c("A", "B"))
duplicated(DT, by = c('A', 'B'))
library(stringr)
help(str_extract)
str_extract(string = 'good', 'o')
str_extract(string = 'good', 'O')
'o' %like% 'good'
'good' %like% 'o'
'good' %like% 'oo'
str_extract
eval(pasrse(text = '1<x<2'))
eval(parse(text = '1<x<2'))
eval(parse(text = '1<x & x<2'))
eval(parse(text = '1<xx & xx<2'))
help(stringr)
library(stringr)
help(package=stringr)
grep(pattern = '[0-9]', '123')
grep(pattern = '[0-9]', 'abd')
grepl(pattern = '[0-9]', 'abd')
grepl(pattern = '[0-9]', '234123')
help(grepl)
grepl(pattern = '[:digit:]', '234123')
grepl(pattern = '[:digits:]', '234123')
grepl(pattern = '[:digit:]', '234123')
grepl(pattern = [:digit:], '234123')
eval(parse(text = 'c(1, 2, 3)'))
eval(parse(text = '1, 2, 3'))
eval(parse(text = '1:4'))
strsplit('1;2;3', ';')
help(seq_along)
seq_along(1:4)
seq_along(10:4)
help(vector)
vector(10)
vector(mode = 'character', 10)
grepl(pattern = '[0-9]', '2g34123')
grepl(pattern = '[[:digit:]]', '2g34123')
vector(mode = 'character', 10)
vector(mode = 'character', 10) <- 2
vector(mode = 'character', 10) <- 1:10
cc <- vector(mode = 'character', 10)
cc <- 1:10
cc
recode <- function(var, recodes, deal.time = FALSE, as.factor.result = TRUE, levels){
is.fac <- is.factor(var)
if(is.fac) var <- as.character(var)
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
recode.res <- vector(mode = 'character', length = length(var))
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
if(as.factor.result | is.factor(var)){
if(missing(levels)){
recode.res <- factor(recode.res, levels = levels)
}else{
recode.res <- factor(recode.res)
}
}
recode.res
}
recode(1:10, '1:5=2;else=3')
recode(1:10, '1,5=2;else=3')
recode(1:10, 'c(1,5)=2;else=3')
recode(1:10, 'c(1,5)=2;c(2, 3)=3')
recode <- function(var, recodes, deal.time = FALSE, as.factor.result = TRUE, levels){
is.fac <- is.factor(var)
if(is.fac) var <- as.character(var)
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
if(as.factor.result | is.factor(var)){
if(missing(levels)){
cat('good\n')
recode.res <- factor(recode.res, levels = levels)
}else{
recode.res <- factor(recode.res)
}
}
recode.res
}
recode(1:10, 'c(1,5)=2;else=3')
factor(1:3, levels = levels)
recode <- function(var, recodes, deal.time = FALSE, as.factor.result = TRUE, levels){
is.fac <- is.factor(var)
if(is.fac) var <- as.character(var)
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
if(as.factor.result | is.factor(var)){
if(missing(levels)){
cat(levels)
recode.res <- factor(recode.res, levels = levels)
}else{
recode.res <- factor(recode.res)
}
}
recode.res
}
recode(1:10, 'c(1,5)=2;else=3')
recode <- function(var, recodes, deal.time = FALSE, as.factor.result = TRUE, levels){
is.fac <- is.factor(var)
if(is.fac) var <- as.character(var)
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
if(as.factor.result | is.factor(var)){
if(!missing(levels)){
recode.res <- factor(recode.res, levels = levels)
}else{
recode.res <- factor(recode.res)
}
}
recode.res
}
recode(1:10, 'c(1,5)=2;else=3')
recode(1:10, 'c(1,5)=2;else=3', levels = c(3))
library(denstyClust)
library(densityClust)
help(package=densityClust)
=======
help(package=process)
round(12345, 100)
round(1.098, 0.03)
library(process)
help
help(package=process)
<<<<<<< HEAD
>>>>>>> 1b1bee011fd10f59d8fd846ec90715a3f2fde97c
=======
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
dist(1:4, 2:5)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
sort(c(2, 0, 3, 5, 7, 2, 6))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main(4)
main(5)
sort(c(2, 0, 3, 5, 7, 2, 6))
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
float kDist(vector<float> dist, int k)
{
nth_element(dist.begin(), dist.begin() + k + 1, dist.end());
for(int i=0; i<7; ++i)
{
cout<<dist[i]<<endl;
}
return dist[k];
}
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 6)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 2)
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 1)
library(microbenchmark)
randu(10)
ranuni
unif
random??
ranunig
??random
runif(10)
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
microbenchmark(kDist(runif(100000), 5), kDist(runif(100000), 99995))
microbenchmark(kDist(runif(100000), 5), kDist(runif(100000), 99995))
>>>>>>> 07013a2210d2e189fd551d0a2a7e4d743415a968
