}
}
if(as.factor.result | is.factor(var)){
if(missing(levels)){
cat(levels)
recode.res <- factor(recode.res, levels = levels)
}else{
recode.res <- factor(recode.res)
}
}
recode.res
}
recode(1:10, 'c(1,5)=2;else=3')
recode <- function(var, recodes, deal.time = FALSE, as.factor.result = TRUE, levels){
is.fac <- is.factor(var)
if(is.fac) var <- as.character(var)
recodes <- str_replace_all(recodes, '\n|\t| ', '')
recode.list <- rev(strsplit(recodes, split = ';')[[1]])
if(deal.time){
low <- ymd('19000101')
high <- ymd('30000101')
}else{
low <- -Inf
high <- Inf
}
valid <- function(string){
res <- try(eval(parse(text = string)), silent = TRUE)
if(deal.time){
if(is.na(res)) stop('\n  ', string, ' is invalid')
}else{
if (class(res) == 'try-error') stop('\n  ', string, ' is invalid')
}
res
}
if(deal.time) recode.res <- vector(mode = 'character', length = length(var))
else recode.res <- var
for(term in recode.list){
#target <- valid(strsplit(term, '=')[[1]][2])
target <- strsplit(term, '=')[[1]][2]
recode <- strsplit(term, '=')[[1]][1]
if(recode %like% '<-<'){
lo <- valid(strsplit(recode, '<-<')[[1]][1])
hi <- valid(strsplit(recode, '<-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var < hi] <- target
}else if(recode %like% '<-'){
lo <- valid(strsplit(recode, '<-')[[1]][1])
hi <- valid(strsplit(recode, '<-')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo < var & var <= hi] <- target
}else if(recode %like% '-<'){
lo <- valid(strsplit(recode, '-<')[[1]][1])
hi <- valid(strsplit(recode, '-<')[[1]][2])
if(lo >= hi) stop(paste('error in', recode))
recode.res[lo <= var & var < hi] <- target
}else if(recode %like% '--'){
lo <- valid(strsplit(recode, '--')[[1]][1])
hi <- valid(strsplit(recode, '--')[[1]][2])
if(lo > hi) stop(paste('error in', recode))
recode.res[lo <= var & var <= hi] <- target
}else if(recode %like% 'else'){
recode.res[] <- target
}else{
set <-valid(recode)
recode.res[var %in% set] <- target
}
}
if(as.factor.result | is.factor(var)){
if(!missing(levels)){
recode.res <- factor(recode.res, levels = levels)
}else{
recode.res <- factor(recode.res)
}
}
recode.res
}
recode(1:10, 'c(1,5)=2;else=3')
recode(1:10, 'c(1,5)=2;else=3', levels = c(3))
library(denstyClust)
library(densityClust)
help(package=densityClust)
=======
help(package=process)
round(12345, 100)
round(1.098, 0.03)
library(process)
help
help(package=process)
<<<<<<< HEAD
>>>>>>> 1b1bee011fd10f59d8fd846ec90715a3f2fde97c
=======
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
dist(1:4, 2:5)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
sort(c(2, 0, 3, 5, 7, 2, 6))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main()
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
main(4)
main(5)
sort(c(2, 0, 3, 5, 7, 2, 6))
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
float kDist(vector<float> dist, int k)
{
nth_element(dist.begin(), dist.begin() + k + 1, dist.end());
for(int i=0; i<7; ++i)
{
cout<<dist[i]<<endl;
}
return dist[k];
}
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 5)
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 6)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
kDist(c(2, 0, 3, 5, 7, 2, 6), 4)
kDist(c(2, 0, 3, 5, 7, 2, 6), 2)
kDist(c(2, 0, 3, 5, 7, 2, 6), 3)
kDist(c(2, 0, 3, 5, 7, 2, 6), 1)
library(microbenchmark)
randu(10)
ranuni
unif
random??
ranunig
??random
runif(10)
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
microbenchmark(kDist(runif(10000), 5), kDist(runif(10000), 9995))
microbenchmark(kDist(runif(100000), 5), kDist(runif(100000), 99995))
microbenchmark(kDist(runif(100000), 5), kDist(runif(100000), 99995))
>>>>>>> 07013a2210d2e189fd551d0a2a7e4d743415a968
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
library(RcppParallel)
install.packages('RcppParallel')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
data(iris)
iris <- as.matrix(iris[1:20,1:4])
LOF(iris, 5, 0)
parallelLOF(iris, 5, 0)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
LOF(iris, 5, 0)
parallelLOF(iris, 5, 0)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
LOF(iris, 5, 0)
parallelLOF(iris, 5, 0)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
LOF(iris, 5, 0)
parallelLOF(iris, 5, 0)
iris[1, 1:4]
(iris[1, 1:4]-iris[1, 1:4])**2
sqrt(sum((iris[1, 1:4]-iris[1, 1:4])**2))
sqrt(sum((iris[1, 1:4]-iris[1, 1:4])**2))==0
library(DMwR)
lafactor(iris, 5)
lofactor(iris, 5)
parallelLOF(iris, 5, 0)
LOF(iris, 5, 0)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
LOF(iris, 5, 0)
parallelLOF(iris, 5, 0)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
LOF(iris, 5, 0)
parallelLOF(iris, 5, 0)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
LOF(iris, 5, 0)
parallelLOF(iris, 5, 0)
library(microbenchmark)
microbenchmark(lofactor(iris, 4), LOF(iris, 4, 0), parallelLOF(iris, 4, 0))
library(microbenchmark)
library(DMwR)
data(iris)
iris1 <- as.matrix(iris[1:100,1:4])
microbenchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0))
install.packages("rbenckmark")
install.packages("rbenchmark")
library(rbenchmark)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0))
iris1 <- as.matrix(iris[1:4])
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0))
iris1 <- as.matrix(iris[sample(1:150, 1000, replace = T),1:4])
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0)) ##150__1:4.429:184.571
iris1 <- as.matrix(iris[sample(1:150, 10000, replace = T),1:4])
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0)) ##150__1:4.429:184.571 1000__1:10.62:111.482
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = c(2, 20, 20)) ##150__1:4.429:184.571 1000__1:10.62:111.482
system.time(parallelLOF(iris1, 4, 0))
system.time(LOF(iris1, 4, 0))
tt <- parallelLOF(iris1, 4, 0)
head9tt
head(tt)
n <- 1e4
iris1 <- matrix(rnorm(n), ncol = 5)
system.time(parallelLOF(iris1, 4, 0))
system.time(LOF(iris1, 4, 0))
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = c(2, 20, 20)) ##150__1:4.429:184.571 1000__1:10.62:111.482
tt <- parallelLOF(iris1, 4, 0)
identical(LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0))
system.time(lofactor(iris1, 4))
n <- 1e5
iris1 <- matrix(rnorm(n), ncol = 5)
system.time(parallelLOF(iris1, 4, 0))
system.time(LOF(iris1, 4, 0))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
system.time(parallelLOF(iris1, 4, 0))
n <- 1e3
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = c(2, 20, 20)) ##150__1:4.429:184.571 1000__1:10.62:111.482
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
n <- 750
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
n <- 5000
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
identical(LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0))
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
n <- 750
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
identical(LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0))
parallelLOF(iris1, 4, 0)
n <- 5000
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
n <- 100
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
microbenchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0))
install.packages(data.table)
install.packages('data.table')
install.packages('lubridate')
library(Rcpp)
help(quote)
lof <- function(data, k)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(quote(data), " is not a data.frame or a matrix!")
}
lof(1, 1)
lof <- function(data, k)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(substitute(data), " is not a data.frame or a matrix!")
}
lof(1, 1)
lof(iris, 1)
data(iris)
iris <- as.matrix(iris)
class(iris)
attributes(iris)
type(iris)
mode(iris)
mode(matrix(1:9, 3))
data(iris)
mode(iris)
dim(iris1)
lof <- function(data, k, equal.num = 0)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(substitute(data), " is not a data.frame or a matrix! \n")
if(mode(data) == "character") stop("Some character variables are in ",substitute(data), "\n")
if(k <= 0 || is.character(k)) stop("k is smaller than 0 or is a character")
}
lof(iris1, '2')
lof(iris1, 2)
lof <- function(data, k, equal.num = 0)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(substitute(data), " is not a data.frame or a matrix! \n")
if(mode(data) == "character") stop("Some character variables are in ",substitute(data), "\n")
if(k <= 0 || is.character(k)) stop("k is smaller than 0 or is a character")
if(k + equal.num > dim(data)[1]) stop("the neighbors are more than the whole points")
res <- parallelLOF(data = data, k = k, equal_num = equal.num)
res
}
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), lof(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
n <- 750
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), lof(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
n <- 5000
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), lof(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
n <- 10000
iris1 <- matrix(rnorm(n), ncol = 5)
benchmark(lofactor(iris1, 4), LOF(iris1, 4, 0), parallelLOF(iris1, 4, 0), lof(iris1, 4, 0), replications = 10) ##150__1:4.429:184.571 1000__1:10.62:111.482
identical(parallelLOF(iris1, 4, 0), lof(iris1, 4, 0))
help(lofactor)
n <- 10000
iris1 <- matrix(rnorm(n), ncol = 2)
iris[1:300, 1:2] <- iris[1:300, 1:2] * 2 + 5
plot(iris)
plot(iris1)
iris1[1:300, 1:2] <- iris[1:300, 1:2] * 2 + 5
plot(iris1)
iris1 <- matrix(rnorm(n), ncol = 2)
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
plot(iris1)
iris1 <- data.frame(iris1)
library(ggplot2)
outlier <- lof(iris1, 6)
iris1[, outlier := (outlier >= 4)]
library(data.table)
iris1 <- matrix(rnorm(n), ncol = 2)
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 6)
iris1[, outlier := (outlier >= 4)]
iris1[,table(outlier)]
iris1[,summary(outlier)]
summary(outlier)
iris1[, outlier := (outlier >= 2)]
iris1[,summary(outlier)]
iris1 <- matrix(rnorm(n), ncol = 2)
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 6)
iris1[, outlier := (outlier >= 2)]
iris1[,summary(outlier)]
ggplot(iris, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
iris1 <- matrix(rnorm(n), ncol = 2)
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 8)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
outlier <- lof(iris1, 20)
iris1[, outlier := (outlier >= 2)]
iris1 <- matrix(rnorm(n), ncol = 2)
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 20)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
iris <- matrix(rnorm(n), ncol = 2)
iris1 <- iris
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 20)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
iris1 <- iris
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 10)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
iris1 <- iris
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 5)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
iris1 <- iris
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
#outlier <- lof(iris1, 5)
outlier <- lofactor(iris1, 5)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
n <- 700
iris <- matrix(rnorm(n), ncol = 2)
iris1 <- iris
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
#outlier <- lof(iris1, 10)
outlier <- lofactor(iris1, 10)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
iris1 <- iris
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
iris1 <- data.table(iris1)
outlier <- lof(iris1, 10)
#outlier <- lofactor(iris1, 10)
iris1[, outlier := (outlier >= 2)]
library(ggplot2)
ggplot(iris1, aes(x=V1, y = V2)) +
geom_point(aes(color = factor(outlier)))
microbenchmark(lof(iris1, 10), lofactor(iris1, 10))
iris1 <- iris
iris1[1:300, 1:2] <- iris1[1:300, 1:2] * 2 + 5
microbenchmark(lof(iris1, 10), lofactor(iris1, 10))
help(quote)
lof <- function(data, k, equal.num = 0)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(expression(data), " is not a data.frame or a matrix! \n")
if(mode(data) == "character") stop("Some character variables are in ",substitute(data), "\n")
if(k <= 0 || is.character(k)) stop("k is smaller than 0 or is a character")
if(k + equal.num > dim(data)[1]) stop("the neighbors are more than the whole points")
res <- parallelLOF(data = data, k = k, equal_num = equal.num)
res
}
iris1[, outlier := (outlier >= 2)]
iris1 <- data.table(iris1)
outlier <- lof(iris1, 10)
iris1[, outlier := (outlier >= 2)]
outlier <- lof(iris1, 10)
lof <- function(data, k, equal.num = 0)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(expression(data), " is not a data.frame or a matrix! \n")
if(mode(data) == "character") stop("Some character variables are in ",expression(data), "\n")
if(k <= 0 || is.character(k)) stop("k is smaller than 0 or is a character")
if(k + equal.num > dim(data)[1]) stop("the neighbors are more than the whole points")
res <- parallelLOF(data = data, k = k, equal_num = equal.num)
res
}
outlier <- lof(iris1, 10)
lof <- function(data, k, equal.num = 0)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(expression(data), " is not a data.frame or a matrix! \n")
if(mode(data) == "character") stop("Some character variables are in ",enquote(data), "\n")
if(k <= 0 || is.character(k)) stop("k is smaller than 0 or is a character")
if(k + equal.num > dim(data)[1]) stop("the neighbors are more than the whole points")
res <- parallelLOF(data = data, k = k, equal_num = equal.num)
res
}
outlier <- lof(iris1, 10)
help(quote)
help(deparse)
lof <- function(data, k, equal.num = 0)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(expression(data), " is not a data.frame or a matrix! \n")
if(mode(data) == "character") stop("Some character variables are in ",deparse(data), "\n")
if(k <= 0 || is.character(k)) stop("k is smaller than 0 or is a character")
if(k + equal.num > dim(data)[1]) stop("the neighbors are more than the whole points")
res <- parallelLOF(data = data, k = k, equal_num = equal.num)
res
}
outlier <- lof(iris1, 10)
lof <- function(data, k, equal.num = 0)
{
if(is.data.frame(data)) data <- as.matrix(data)
if(!is.matrix(data)) stop(expression(data), " is not a data.frame or a matrix! \n")
if(mode(data) == "character") stop("Some character variables are in ",deparse(substitute(data)), "\n")
if(k <= 0 || is.character(k)) stop("k is smaller than 0 or is a character")
if(k + equal.num > dim(data)[1]) stop("the neighbors are more than the whole points")
res <- parallelLOF(data = data, k = k, equal_num = equal.num)
res
}
outlier <- lof(iris1, 10)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
require(stringr)
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- str_pad(format(r, digits = digits), width = digits + 2, pad = '0', side = 'right')
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.5/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
data("iris")
View(iris)
pairs(iris[,1:4], lower.panel = panel.smooth(), upper.panel = panel.cor())
pairs(iris[,1:4], lower.panel = panel.smooth, upper.panel = panel.cor)
library(process)
Rcpp::sourceCpp('src/LocalOutlierFactor.cpp')
parallelLOF(iris[,1:4], 3,3 )
parallelLOF(as.matrix(iris[,1:4]), 3,3 )
parallelLOF(as.matrix(iris[,1:4]), 3, 2 )
parallelLOF(as.matrix(iris[,1:4]), 3,  4)
install.packages(c("boot", "chron", "class", "cluster", "dplyr", "foreign", "gdata", "gtools", "httr", "KernSmooth", "lme4", "manipulate", "MASS", "Matrix", "nlme", "nnet", "plyr", "R6", "RcppArmadillo", "RcppParallel", "RCurl", "rmarkdown", "rpart", "rversions", "scales", "shiny", "spatial", "stringi", "survival", "TTR", "XML"))
